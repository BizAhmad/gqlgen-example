// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package graph

import (
	"bytes"
	context "context"
	strconv "strconv"

	graphql "github.com/vektah/gqlgen/graphql"
	introspection "github.com/vektah/gqlgen/neelance/introspection"
	query "github.com/vektah/gqlgen/neelance/query"
	schema "github.com/vektah/gqlgen/neelance/schema"
)

func MakeExecutableSchema(resolvers Resolvers) graphql.ExecutableSchema {
	return &executableSchema{resolvers: resolvers}
}

type Resolvers interface {
	Query_films(ctx context.Context, title *string) ([]Film, error)
	Query_people(ctx context.Context, name *string) ([]Person, error)
	Query_planets(ctx context.Context, name *string) ([]Planet, error)
	Query_species(ctx context.Context, name *string) ([]Species, error)
	Query_starships(ctx context.Context, nameOrModel *string) ([]Starship, error)
	Query_vehicles(ctx context.Context, nameOrModel *string) ([]Vehicle, error)
}

type executableSchema struct {
	resolvers Resolvers
}

func (e *executableSchema) Schema() *schema.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *query.Operation) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e.resolvers}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.Selections)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *query.Operation) *graphql.Response {
	return graphql.ErrorResponse(ctx, "mutations are not supported")
}

func (e *executableSchema) Subscription(ctx context.Context, op *query.Operation) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext

	resolvers Resolvers
}

var filmImplementors = []string{"Film"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Film(ctx context.Context, sel []query.Selection, obj *Film) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, filmImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Film")
		case "id":
			out.Values[i] = ec._Film_id(ctx, field, obj)
		case "episode":
			out.Values[i] = ec._Film_episode(ctx, field, obj)
		case "openingCrawl":
			out.Values[i] = ec._Film_openingCrawl(ctx, field, obj)
		case "directorName":
			out.Values[i] = ec._Film_directorName(ctx, field, obj)
		case "producerNames":
			out.Values[i] = ec._Film_producerNames(ctx, field, obj)
		case "releaseDate":
			out.Values[i] = ec._Film_releaseDate(ctx, field, obj)
		case "species":
			out.Values[i] = ec._Film_species(ctx, field, obj)
		case "starships":
			out.Values[i] = ec._Film_starships(ctx, field, obj)
		case "vehicles":
			out.Values[i] = ec._Film_vehicles(ctx, field, obj)
		case "characters":
			out.Values[i] = ec._Film_characters(ctx, field, obj)
		case "planets":
			out.Values[i] = ec._Film_planets(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Film_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Film_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Film_id(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Film_episode(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Episode
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Film_openingCrawl(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OpeningCrawl
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Film_directorName(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DirectorName
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Film_producerNames(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ProducerNames
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_releaseDate(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ReleaseDate
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Film_species(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Species
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Species(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_starships(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Starships
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Starship(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_vehicles(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Vehicles
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Vehicle(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_characters(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Characters
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Person(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_planets(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Planets
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Planet(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Film_createdAt(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Film_editedAt(ctx context.Context, field graphql.CollectedField, obj *Film) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Film"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var personImplementors = []string{"Person"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Person(ctx context.Context, sel []query.Selection, obj *Person) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, personImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "id":
			out.Values[i] = ec._Person_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Person_name(ctx, field, obj)
		case "birthYear":
			out.Values[i] = ec._Person_birthYear(ctx, field, obj)
		case "eyeColor":
			out.Values[i] = ec._Person_eyeColor(ctx, field, obj)
		case "gender":
			out.Values[i] = ec._Person_gender(ctx, field, obj)
		case "hairColor":
			out.Values[i] = ec._Person_hairColor(ctx, field, obj)
		case "height":
			out.Values[i] = ec._Person_height(ctx, field, obj)
		case "mass":
			out.Values[i] = ec._Person_mass(ctx, field, obj)
		case "skinColor":
			out.Values[i] = ec._Person_skinColor(ctx, field, obj)
		case "homeworld":
			out.Values[i] = ec._Person_homeworld(ctx, field, obj)
		case "films":
			out.Values[i] = ec._Person_films(ctx, field, obj)
		case "species":
			out.Values[i] = ec._Person_species(ctx, field, obj)
		case "vehicles":
			out.Values[i] = ec._Person_vehicles(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Person_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Person_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Person_id(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Person_name(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Person_birthYear(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.BirthYear
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Person_eyeColor(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EyeColor
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Person_gender(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Gender
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Person_hairColor(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.HairColor
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Person_height(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 LengthUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "CENTIMETER"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Height
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Person_mass(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 MassUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "KILOGRAM"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Mass
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Person_skinColor(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SkinColor
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) _Person_homeworld(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Homeworld
	if res == nil {
		return graphql.Null
	}
	return ec._Planet(ctx, field.Selections, res)
}

func (ec *executionContext) _Person_films(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Films
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Film(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Person_species(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Species
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Species(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Person_vehicles(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Vehicles
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Vehicle(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Person_createdAt(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Person_editedAt(ctx context.Context, field graphql.CollectedField, obj *Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var planetImplementors = []string{"Planet"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Planet(ctx context.Context, sel []query.Selection, obj *Planet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, planetImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Planet")
		case "id":
			out.Values[i] = ec._Planet_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Planet_name(ctx, field, obj)
		case "diameter":
			out.Values[i] = ec._Planet_diameter(ctx, field, obj)
		case "rotationPeriod":
			out.Values[i] = ec._Planet_rotationPeriod(ctx, field, obj)
		case "orbitalPeriod":
			out.Values[i] = ec._Planet_orbitalPeriod(ctx, field, obj)
		case "gravity":
			out.Values[i] = ec._Planet_gravity(ctx, field, obj)
		case "population":
			out.Values[i] = ec._Planet_population(ctx, field, obj)
		case "climates":
			out.Values[i] = ec._Planet_climates(ctx, field, obj)
		case "terrains":
			out.Values[i] = ec._Planet_terrains(ctx, field, obj)
		case "surfaceWaterPercentage":
			out.Values[i] = ec._Planet_surfaceWaterPercentage(ctx, field, obj)
		case "residents":
			out.Values[i] = ec._Planet_residents(ctx, field, obj)
		case "films":
			out.Values[i] = ec._Planet_films(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Planet_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Planet_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Planet_id(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Planet_name(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Planet_diameter(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 LengthUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "KILOMETER"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Diameter
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Planet_rotationPeriod(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.RotationPeriod
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Planet_orbitalPeriod(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OrbitalPeriod
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Planet_gravity(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Gravity
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Planet_population(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Population
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Planet_climates(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Climates
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Planet_terrains(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Terrains
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Planet_surfaceWaterPercentage(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SurfaceWaterPercentage
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Planet_residents(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Residents
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Person(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Planet_films(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Films
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Film(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Planet_createdAt(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Planet_editedAt(ctx context.Context, field graphql.CollectedField, obj *Planet) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Planet"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel []query.Selection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, queryImplementors, ec.Variables)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "films":
			out.Values[i] = ec._Query_films(ctx, field)
		case "people":
			out.Values[i] = ec._Query_people(ctx, field)
		case "planets":
			out.Values[i] = ec._Query_planets(ctx, field)
		case "species":
			out.Values[i] = ec._Query_species(ctx, field)
		case "starships":
			out.Values[i] = ec._Query_starships(ctx, field)
		case "vehicles":
			out.Values[i] = ec._Query_vehicles(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_films(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["title"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["title"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_films(ctx, args["title"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Film)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Film(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_people(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_people(ctx, args["name"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Person)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Person(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_planets(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_planets(ctx, args["name"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Planet)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Planet(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_species(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_species(ctx, args["name"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Species)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Species(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_starships(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["nameOrModel"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["nameOrModel"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_starships(ctx, args["nameOrModel"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Starship)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Starship(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_vehicles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := field.Args["nameOrModel"]; ok {
		var err error
		var ptr1 string
		if tmp != nil {
			ptr1, err = graphql.UnmarshalString(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["nameOrModel"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp, err := ec.ResolverMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query_vehicles(ctx, args["nameOrModel"].(*string))
		})
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]Vehicle)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				return ec._Vehicle(ctx, field.Selections, &res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectSchema()
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := field.Args["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := ec.introspectType(args["name"].(string))
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

var speciesImplementors = []string{"Species"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Species(ctx context.Context, sel []query.Selection, obj *Species) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, speciesImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Species")
		case "id":
			out.Values[i] = ec._Species_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Species_name(ctx, field, obj)
		case "classification":
			out.Values[i] = ec._Species_classification(ctx, field, obj)
		case "designation":
			out.Values[i] = ec._Species_designation(ctx, field, obj)
		case "averageHeight":
			out.Values[i] = ec._Species_averageHeight(ctx, field, obj)
		case "averageLifespan":
			out.Values[i] = ec._Species_averageLifespan(ctx, field, obj)
		case "eyeColors":
			out.Values[i] = ec._Species_eyeColors(ctx, field, obj)
		case "hairColors":
			out.Values[i] = ec._Species_hairColors(ctx, field, obj)
		case "skinColors":
			out.Values[i] = ec._Species_skinColors(ctx, field, obj)
		case "language":
			out.Values[i] = ec._Species_language(ctx, field, obj)
		case "homeworld":
			out.Values[i] = ec._Species_homeworld(ctx, field, obj)
		case "characters":
			out.Values[i] = ec._Species_characters(ctx, field, obj)
		case "films":
			out.Values[i] = ec._Species_films(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Species_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Species_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Species_id(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Species_name(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Species_classification(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Classification
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Species_designation(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Designation
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Species_averageHeight(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 LengthUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "CENTIMETER"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AverageHeight
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Species_averageLifespan(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.AverageLifespan
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Species_eyeColors(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EyeColors
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Species_hairColors(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.HairColors
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Species_skinColors(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SkinColors
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Species_language(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Language
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Species_homeworld(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Homeworld
	if res == nil {
		return graphql.Null
	}
	return ec._Planet(ctx, field.Selections, res)
}

func (ec *executionContext) _Species_characters(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Characters
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Person(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Species_films(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Films
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Film(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Species_createdAt(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Species_editedAt(ctx context.Context, field graphql.CollectedField, obj *Species) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Species"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var starshipImplementors = []string{"Starship"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Starship(ctx context.Context, sel []query.Selection, obj *Starship) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, starshipImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Starship")
		case "id":
			out.Values[i] = ec._Starship_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Starship_name(ctx, field, obj)
		case "model":
			out.Values[i] = ec._Starship_model(ctx, field, obj)
		case "class":
			out.Values[i] = ec._Starship_class(ctx, field, obj)
		case "manufacturers":
			out.Values[i] = ec._Starship_manufacturers(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._Starship_cost(ctx, field, obj)
		case "length":
			out.Values[i] = ec._Starship_length(ctx, field, obj)
		case "crewSize":
			out.Values[i] = ec._Starship_crewSize(ctx, field, obj)
		case "passengerCapacity":
			out.Values[i] = ec._Starship_passengerCapacity(ctx, field, obj)
		case "maxAtmosphericSpeed":
			out.Values[i] = ec._Starship_maxAtmosphericSpeed(ctx, field, obj)
		case "hyperdriveRating":
			out.Values[i] = ec._Starship_hyperdriveRating(ctx, field, obj)
		case "maxMegalightsPerHour":
			out.Values[i] = ec._Starship_maxMegalightsPerHour(ctx, field, obj)
		case "cargoCapacity":
			out.Values[i] = ec._Starship_cargoCapacity(ctx, field, obj)
		case "consumablesDuration":
			out.Values[i] = ec._Starship_consumablesDuration(ctx, field, obj)
		case "films":
			out.Values[i] = ec._Starship_films(ctx, field, obj)
		case "pilots":
			out.Values[i] = ec._Starship_pilots(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Starship_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Starship_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Starship_id(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Starship_name(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Starship_model(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Model
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Starship_class(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Class
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Starship_manufacturers(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Manufacturers
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Starship_cost(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Cost
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Starship_length(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 LengthUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "METER"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Length
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Starship_crewSize(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CrewSize
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Starship_passengerCapacity(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PassengerCapacity
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Starship_maxAtmosphericSpeed(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MaxAtmosphericSpeed
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*res)
}

func (ec *executionContext) _Starship_hyperdriveRating(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.HyperdriveRating
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*res)
}

func (ec *executionContext) _Starship_maxMegalightsPerHour(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MaxMegalightsPerHour
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Starship_cargoCapacity(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 MassUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "KILOGRAM"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CargoCapacity
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Starship_consumablesDuration(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ConsumablesDuration
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Starship_films(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Films
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Film(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Starship_pilots(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Pilots
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Person(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Starship_createdAt(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Starship_editedAt(ctx context.Context, field graphql.CollectedField, obj *Starship) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Starship"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var vehicleImplementors = []string{"Vehicle"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Vehicle(ctx context.Context, sel []query.Selection, obj *Vehicle) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, vehicleImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Vehicle")
		case "id":
			out.Values[i] = ec._Vehicle_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Vehicle_name(ctx, field, obj)
		case "model":
			out.Values[i] = ec._Vehicle_model(ctx, field, obj)
		case "class":
			out.Values[i] = ec._Vehicle_class(ctx, field, obj)
		case "manufacturers":
			out.Values[i] = ec._Vehicle_manufacturers(ctx, field, obj)
		case "length":
			out.Values[i] = ec._Vehicle_length(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._Vehicle_cost(ctx, field, obj)
		case "crewSize":
			out.Values[i] = ec._Vehicle_crewSize(ctx, field, obj)
		case "passengerCapacity":
			out.Values[i] = ec._Vehicle_passengerCapacity(ctx, field, obj)
		case "maxAtmosphericSpeed":
			out.Values[i] = ec._Vehicle_maxAtmosphericSpeed(ctx, field, obj)
		case "cargoCapacity":
			out.Values[i] = ec._Vehicle_cargoCapacity(ctx, field, obj)
		case "consumablesDuration":
			out.Values[i] = ec._Vehicle_consumablesDuration(ctx, field, obj)
		case "films":
			out.Values[i] = ec._Vehicle_films(ctx, field, obj)
		case "pilots":
			out.Values[i] = ec._Vehicle_pilots(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Vehicle_createdAt(ctx, field, obj)
		case "editedAt":
			out.Values[i] = ec._Vehicle_editedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Vehicle_id(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ID
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Vehicle_name(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Vehicle_model(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Model
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Vehicle_class(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Class
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Vehicle_manufacturers(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Manufacturers
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Vehicle_length(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 LengthUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "METER"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Length
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Vehicle_cost(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Cost
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Vehicle_crewSize(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CrewSize
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Vehicle_passengerCapacity(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PassengerCapacity
	return graphql.MarshalInt(res)
}

func (ec *executionContext) _Vehicle_maxAtmosphericSpeed(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MaxAtmosphericSpeed
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Vehicle_cargoCapacity(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 MassUnit
	if tmp, ok := field.Args["unit"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	} else {
		var tmp interface{} = "KILOGRAM"
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}

	args["unit"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CargoCapacity
	return graphql.MarshalFloat(res)
}

func (ec *executionContext) _Vehicle_consumablesDuration(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.ConsumablesDuration
	return graphql.MarshalString(res)
}

func (ec *executionContext) _Vehicle_films(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Films
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Film(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Vehicle_pilots(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Pilots
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec._Person(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Vehicle_createdAt(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.CreatedAt
	return graphql.MarshalTime(res)
}

func (ec *executionContext) _Vehicle_editedAt(ctx context.Context, field graphql.CollectedField, obj *Vehicle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Vehicle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EditedAt
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel []query.Selection, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __DirectiveImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Locations()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel []query.Selection, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __EnumValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel []query.Selection, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __FieldImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Args()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.IsDeprecated()
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DeprecationReason()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel []query.Selection, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __InputValueImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Type()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.DefaultValue()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel []query.Selection, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __SchemaImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Types()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.QueryType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.MutationType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.SubscriptionType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Directives()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Directive(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel []query.Selection, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.Doc, sel, __TypeImplementors, ec.Variables)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Kind()
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Name()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Description()
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Fields(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Field(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.Interfaces()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.PossibleTypes()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___Type(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := field.Args["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.EnumValues(args["includeDeprecated"].(bool))
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___EnumValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.InputFields()
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec.___InputValue(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	res := obj.OfType()
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	t := parsedSchema.Resolve(name)
	if t == nil {
		return nil
	}
	return introspection.WrapType(t)
}

var parsedSchema = schema.MustParse(`# The Query type contains all of the API's read operations.
type Query {
  # Search for a film by its title, or get all films when no parameters are provided.
  films(title: String): [Film!]

  # Search for a person by their name, or get all characters when no parameters are provided.
  people(name: String): [Person!]

  # Search for a planet by its name, or get all planets when no parameters are provided.
  planets(name: String): [Planet!]

  # Search for a species by its name, or get all species when no parameters are provided.
  species(name: String): [Species!]

  # Search for a starship by its name or model, or get all starships when no parameters are provided.
  starships(nameOrModel: String): [Starship!]
  
  # Search for a vehicle by its name or model, or get all vehicles when no parameters are provided.
  vehicles(nameOrModel: String): [Vehicle!]
}

# A Star Wars film.
type Film {
  # A unique identifier.
  id: ID!

  # The episode number of this film.
  episode: Int!

  # The opening paragraphs at the beginning of this film.
  openingCrawl: String!

  # The name of this film's director.
  directorName: String!

  # A list of names of the film's producers.
  producerNames: [String!]!

  # The RFC3339 date format of the film release in the orginal creator country.
  releaseDate: Time!

  # A list of species that are in this film.
  species: [Species!]

  # A list of starships that are in this film.
  starships: [Starship!]

  # A list of vehicles that are in this film.
  vehicles: [Vehicle!]

  # A list of characters that are in this film.
  characters: [Person!]

  # A list of planets that are in this film.
  planets: [Planet!]

  # The RFC3339 date format of the time that this resource was created.
  createdAt: Time!
  
  # The RFC3339 date format of the time that this resource was edited.
  editedAt: Time
}

# A LengthUnit refers to a discrete, pre-established length or distance having a constant magnitude
# which is used as a reference or convention to express linear dimension.
enum LengthUnit {
  # A millimeter is a unit of length in the metric system, equal to 1/1000 of a meter.
  MILLIMETER
  
  # A centimeter is a unit of length in the metric system, equal to 1/100 of a meter.
  CENTIMETER

  # A meter is defined as the length of the path traveled by light in a vacuum in 1/299792458 seconds.
  METER

  # A kilometer is a unit of length in the metric system, equal to 1000 meters.
  KILOMETER

  # An inch is a unit of length in the imperial system equal to 1/36 of a yard.
  INCH

  # A foot is a unit of length in the imperial system equal to 1/3 of a yard.
  FOOT

  # A yard is a unit of length in the imperial system equal to exactly 0.9144 meters.
  YARD
  
  # A mile is a unit of length of linear measure in the imperial system equal to 1760 yards.
  MILE
}

# A MassUnit is a measure of a physical body.
enum MassUnit {
  # A gram is a unit of mass in the metric system equal to 1/1000 of a kilogram.
  GRAM

  # A kilogram is the base unit of mass in the metric system.
  KILOGRAM

  # A metric ton is unit of mass in the metric system equal to 1000 kilograms.
  METRIC_TON
  
  # A pound is a unit of mass in the imperial system equal to 0.43559237 kilograms.
  POUND
}

# A person is an individual character within the Star Wars universe.
type Person {
  # A unique identifier.
  id: ID!
  # The name of this person.
  name: String!
  # The birth year of the person, using the in-universe standard of BBY of ABY.
  # That is, Before the Battle of Yavin or After the Battle of Yavin.
  # The Battle of Yavin is a battle that occurs at the end of Star Wars Episode IV: A New Hope.
  birthYear: String!
  # The eye color of this person.
  # Value will be "unknown" if not known or null if the person does not have an eye.
  eyeColor: String
  # The gender of this person.
  # Either "male", "female", or "unknown". Null if the person does not have a gender.
  gender: String
  # The hair color of this person.
  # Value will be "unknown" if not known or null if the person does not have hair.
  hairColor: String
  # The height of the person in the specified unit.
  height(unit: LengthUnit = CENTIMETER): Float!
  # The mass of the person in the specified unit.
  mass(unit: MassUnit = KILOGRAM): Float!
  # The skin color of this person.
  # Value will be "unknown" if not known of null if ther person does not have skin.
  skinColor: String
  # The planet this person was born on or inhabits.
  homeworld: Planet
  # A list of the films this person has been in.
  films: [Film!]
  # A list of species this person belongs to.
  species: [Species!]
  # A list of vehicles this person has piloted.
  vehicles: [Vehicle!]
  # The RFC3339 date format of the time this resource was created.
  createdAt: Time!
  # The RFC3339 date format of the time this resource was edited.
  editedAt: Time
}

# A Planet is a large mass, planet, or planetoid in the Star Wars universe, at the time of 0 ABY.
type Planet {
  # A unique identifier.
  id: ID!
  # The name of this planet.
  name: String!
  # The diameter of this planet in the provided units.
  diameter(unit: LengthUnit = KILOMETER): Float!
  # The number of standard hours it takes for this planet to complete a single rotation on its axis.
  rotationPeriod: Float!
  # The number of standard days it takes for this planet to complete a single orbit of its local star.
  orbitalPeriod: Float!
  # A number denoting the gravity of this planet, where 1.0 is normal or 1 standard G.
  gravity: Float!
  # The average population of sentient beings inhabiting this planet.
  population: Int!
  # A list of the climates found on this planet.
  climates: [String!]!
  # A list of the terrains found on this planet.
  terrains: [String!]!
  # The percentage 0.0-100.0 of the planet surface that is naturally occurring water or bodies of water.
  surfaceWaterPercentage: Float!
  # A list of notable people who live on this planet.
  residents: [Person!]
  # A list of films this planet has appeared in.
  films: [Film!]
  # The RFC3339 date format of the time that this resource was created.
  createdAt: Time!
  # The RFC3339 date format of the time that this resource was edited.
  editedAt: Time
}

# A Species is a type of person or character within the Star Wars universe.
type Species {
  # A unique identifier.
  id: ID!
  # The name of this species.
  name: String!
  # The classification of this species, such as "mammal" or "reptile".
  classification: String!
  # The designation of this species
  designation: String!
  # The average height of this species in the specified length unit.
  averageHeight(unit: LengthUnit = CENTIMETER): Float!
  # The average lifespan of this species in Earth years.
  averageLifespan: Float!
  # A list of common eye colors for this species.
  # Empty if this species does not typically have eyes.
  eyeColors: [String!]!
  # A list of common hair colors for this species.
  # Empty if this species does not typically have hair.
  hairColors: [String!]!
  # A list of common skin colors for this species.
  # Empty if this species typically does not have skin.
  skinColors: [String!]!
  # The language commonly spoken by this species.
  language: String!
  # The planet this species originates from.
  homeworld: Planet
  # A list of characters that are a part of this species.
  characters: [Person!]
  # A list of films that this species has appeared in.
  films: [Film!]
  # The RFC3339 date format of the time this resource was created.
  createdAt: Time!
  # The RFC3339 date format of the time this resource was edited.
  editedAt: Time
}

# A Starship is a single transport craft that has hyperdrive capability.
type Starship {
  # A unique identifier.
  id: ID!
  # The common name of the this startship (example: "Death Star").
  name: String!
  # The model or official name of this starship (example: "T-65 X-wing").
  model: String!
  # The class of this starship, such as "Starfighter".
  class: String!
  # A list of the manufacturer names of this starship.
  manufacturers: [String!]!
  # The cost of this starship new, in galactic credits.
  cost: Int!
  # The length of this starship in the specified units.
  length(unit: LengthUnit = METER): Float!
  # The number of personnel needed to run or pilot this starship.
  crewSize: Int!
  # The number of non-essential people this starship can transport.
  passengerCapacity: Int!
  # The maximum speed of this starship in the atmosphere.
  # Null if this starship is incapable of atmospheric flight.
  maxAtmosphericSpeed: Int
  # The class of this starship's hyperdrive.
  hyperdriveRating: Float
  # The maximum number of Megalights this starship can travel in a standard hour.
  maxMegalightsPerHour: Int!
  # The maximum amount of mass this starship can transport.
  cargoCapacity(unit: MassUnit = KILOGRAM): Float!
  # The maximum length of time that this starship can provide consumables for its entire crew without
  # having to resupply.
  consumablesDuration: String!
  # A list of films that this starship has appeared in.
  films: [Film!]
  # A list of people that have piloted this starship.
  pilots: [Person!]
  # The RFC3339 date format of the time that this resource was created.
  createdAt: Time!
  # The RFC3339 date format of the time that this resource was edited.
  editedAt: Time
}

# Time is an RFC3339 timestamp.
scalar Time

# A Vehicle is a single transport craft that does not have hyperdrive capability.
type Vehicle {
  # A unique identifier.
  id: ID!
  # The common name of this vehicle (example: "Sand Crawler").
  name: String!
  # The model or official name of this vehicle (example: "All-Terrain Attack Transport").
  model: String!
  # The class of this vehicle (example: "Wheeled" or "Repulsorcraft").
  class: String!
  # A list of the manufacturers of this vehicle.
  manufacturers: [String!]!
  # The length of this vehicle in provided units.
  length(unit: LengthUnit = METER): Float!
  # The cost of this vehicle new, in galactic credits.
  cost: Int!
  # The number of personnel needed to run or pilot this vehicle.
  crewSize: Int!
  # The number of non-essential people this vehicle can transport.
  passengerCapacity: Int!
  # The maximum speed of this vehicle in the atmoshpere.
  maxAtmosphericSpeed: Float!
  # The maximum number of kilograms that this vehicle can transport.
  cargoCapacity(unit: MassUnit = KILOGRAM): Float!
  # The maximum length of time that this vehicle can provide consumables for its entire crew without
  # having to resupply.
  consumablesDuration: String!
  # A list of films that this vehicle has appeared in.
  films: [Film!]
  # A list of people that have piloted this vehicle.
  pilots: [Person!]
  # The RFC3339 date format of the time that this resource was created.
  createdAt: Time!
  # The RFC3339 date format of the time that this resource was edited.
  editedAt: Time
}`)
