// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package graph

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
	time "time"
)

type Film struct {
	ID            string     `json:"id"`
	Episode       int        `json:"episode"`
	OpeningCrawl  string     `json:"openingCrawl"`
	DirectorName  string     `json:"directorName"`
	ProducerNames []string   `json:"producerNames"`
	ReleaseDate   time.Time  `json:"releaseDate"`
	Species       []Species  `json:"species"`
	Starships     []Starship `json:"starships"`
	Vehicles      []Vehicle  `json:"vehicles"`
	Characters    []Person   `json:"characters"`
	Planets       []Planet   `json:"planets"`
	CreatedAt     time.Time  `json:"createdAt"`
	EditedAt      *time.Time `json:"editedAt"`
}
type Person struct {
	ID        string     `json:"id"`
	Name      string     `json:"name"`
	BirthYear string     `json:"birthYear"`
	EyeColor  *string    `json:"eyeColor"`
	Gender    *string    `json:"gender"`
	HairColor *string    `json:"hairColor"`
	Height    float64    `json:"height"`
	Mass      float64    `json:"mass"`
	SkinColor *string    `json:"skinColor"`
	Homeworld *Planet    `json:"homeworld"`
	Films     []Film     `json:"films"`
	Species   []Species  `json:"species"`
	Vehicles  []Vehicle  `json:"vehicles"`
	CreatedAt time.Time  `json:"createdAt"`
	EditedAt  *time.Time `json:"editedAt"`
}
type Planet struct {
	ID                     string     `json:"id"`
	Name                   string     `json:"name"`
	Diameter               float64    `json:"diameter"`
	RotationPeriod         float64    `json:"rotationPeriod"`
	OrbitalPeriod          float64    `json:"orbitalPeriod"`
	Gravity                float64    `json:"gravity"`
	Population             int        `json:"population"`
	Climates               []string   `json:"climates"`
	Terrains               []string   `json:"terrains"`
	SurfaceWaterPercentage float64    `json:"surfaceWaterPercentage"`
	Residents              []Person   `json:"residents"`
	Films                  []Film     `json:"films"`
	CreatedAt              time.Time  `json:"createdAt"`
	EditedAt               *time.Time `json:"editedAt"`
}
type Species struct {
	ID              string     `json:"id"`
	Name            string     `json:"name"`
	Classification  string     `json:"classification"`
	Designation     string     `json:"designation"`
	AverageHeight   float64    `json:"averageHeight"`
	AverageLifespan float64    `json:"averageLifespan"`
	EyeColors       []string   `json:"eyeColors"`
	HairColors      []string   `json:"hairColors"`
	SkinColors      []string   `json:"skinColors"`
	Language        string     `json:"language"`
	Homeworld       *Planet    `json:"homeworld"`
	Characters      []Person   `json:"characters"`
	Films           []Film     `json:"films"`
	CreatedAt       time.Time  `json:"createdAt"`
	EditedAt        *time.Time `json:"editedAt"`
}
type Starship struct {
	ID                   string     `json:"id"`
	Name                 string     `json:"name"`
	Model                string     `json:"model"`
	Class                string     `json:"class"`
	Manufacturers        []string   `json:"manufacturers"`
	Cost                 int        `json:"cost"`
	Length               float64    `json:"length"`
	CrewSize             int        `json:"crewSize"`
	PassengerCapacity    int        `json:"passengerCapacity"`
	MaxAtmosphericSpeed  *int       `json:"maxAtmosphericSpeed"`
	HyperdriveRating     *float64   `json:"hyperdriveRating"`
	MaxMegalightsPerHour int        `json:"maxMegalightsPerHour"`
	CargoCapacity        float64    `json:"cargoCapacity"`
	ConsumablesDuration  string     `json:"consumablesDuration"`
	Films                []Film     `json:"films"`
	Pilots               []Person   `json:"pilots"`
	CreatedAt            time.Time  `json:"createdAt"`
	EditedAt             *time.Time `json:"editedAt"`
}
type Vehicle struct {
	ID                  string     `json:"id"`
	Name                string     `json:"name"`
	Model               string     `json:"model"`
	Class               string     `json:"class"`
	Manufacturers       []string   `json:"manufacturers"`
	Length              float64    `json:"length"`
	Cost                int        `json:"cost"`
	CrewSize            int        `json:"crewSize"`
	PassengerCapacity   int        `json:"passengerCapacity"`
	MaxAtmosphericSpeed float64    `json:"maxAtmosphericSpeed"`
	CargoCapacity       float64    `json:"cargoCapacity"`
	ConsumablesDuration string     `json:"consumablesDuration"`
	Films               []Film     `json:"films"`
	Pilots              []Person   `json:"pilots"`
	CreatedAt           time.Time  `json:"createdAt"`
	EditedAt            *time.Time `json:"editedAt"`
}

type LengthUnit string

const (
	LengthUnitMillimeter LengthUnit = "MILLIMETER" // A millimeter is a unit of length in the metric system, equal to 1/1000 of a meter.
	LengthUnitCentimeter LengthUnit = "CENTIMETER" // A centimeter is a unit of length in the metric system, equal to 1/100 of a meter.
	LengthUnitMeter      LengthUnit = "METER"      // A meter is defined as the length of the path traveled by light in a vacuum in 1/299792458 seconds.
	LengthUnitKilometer  LengthUnit = "KILOMETER"  // A kilometer is a unit of length in the metric system, equal to 1000 meters.
	LengthUnitInch       LengthUnit = "INCH"       // An inch is a unit of length in the imperial system equal to 1/36 of a yard.
	LengthUnitFoot       LengthUnit = "FOOT"       // A foot is a unit of length in the imperial system equal to 1/3 of a yard.
	LengthUnitYard       LengthUnit = "YARD"       // A yard is a unit of length in the imperial system equal to exactly 0.9144 meters.
	LengthUnitMile       LengthUnit = "MILE"       // A mile is a unit of length of linear measure in the imperial system equal to 1760 yards.
)

func (e LengthUnit) IsValid() bool {
	switch e {
	case LengthUnitMillimeter, LengthUnitCentimeter, LengthUnitMeter, LengthUnitKilometer, LengthUnitInch, LengthUnitFoot, LengthUnitYard, LengthUnitMile:
		return true
	}
	return false
}

func (e LengthUnit) String() string {
	return string(e)
}

func (e *LengthUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LengthUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LengthUnit", str)
	}
	return nil
}

func (e LengthUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MassUnit string

const (
	MassUnitGram      MassUnit = "GRAM"       // A gram is a unit of mass in the metric system equal to 1/1000 of a kilogram.
	MassUnitKilogram  MassUnit = "KILOGRAM"   // A kilogram is the base unit of mass in the metric system.
	MassUnitMetricTon MassUnit = "METRIC_TON" // A metric ton is unit of mass in the metric system equal to 1000 kilograms.
	MassUnitPound     MassUnit = "POUND"      // A pound is a unit of mass in the imperial system equal to 0.43559237 kilograms.
)

func (e MassUnit) IsValid() bool {
	switch e {
	case MassUnitGram, MassUnitKilogram, MassUnitMetricTon, MassUnitPound:
		return true
	}
	return false
}

func (e MassUnit) String() string {
	return string(e)
}

func (e *MassUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MassUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MassUnit", str)
	}
	return nil
}

func (e MassUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
